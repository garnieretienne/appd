require "hosts"
require "appd/server/ssh"
require "appd/server/chef"

module Appd

  module Server

    class System

      ADMIN_KEYS_PATH = "/root/admin_keys"

      def initialize(ssh_uri)
        @remote = Appd::Server::SSH.new ssh_uri
      end

      # Cache the SSH remote connection
      def ssh
        @ssh ||= @remote.connect
        @remote
      end

      # Cache the chef instance
      def chef
        @chef ||= Appd::Server::Chef.new ssh
      end

      # Return the hostname of the remote host
      def hostname
        ssh.exec!("hostname").chomp
      end

      # Set the hostname on the remote host
      def hostname=(name)
        if hostname != name
          rebuild_host_file(name, fqdn)
          ssh.exec! "hostname #{name}", sudo: true
          ssh.exec! "echo #{name} > /etc/hostname", sudo: true
        end
      end

      # Get the first non-localhost IP address and assume it's the main IP address
      def ip
        ssh.exec!("/sbin/ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'").chomp
      end

      # Get the fully qualified domain name of the remote host
      def fqdn
        exit_code, stdout = ssh.exec("hostname --fqdn")
        (exit_code == 0) ? stdout.chomp : ""
      end

      # Set the fully qualified domain name of the remote host
      def fqdn=(name)
        rebuild_host_file(hostname, name) if fqdn != name
      end

      # Update the system using its package manager
      def update(&block)
        ssh.exec! "apt-get --assume-yes update", sudo: true
        ssh.exec "apt-get --assume-yes upgrade", sudo: true do |ch, stream, data, cmd|
          yield data
        end
      end

      # Upload a local SSH key to the server
      def upload_admin_key(user, path)
        ssh.send_file path, "/tmp/#{user}.pub"
        ssh.exec! "mkdir --parents #{ADMIN_KEYS_PATH}", sudo: true
        ssh.exec! "mv /tmp/#{user}.pub #{ADMIN_KEYS_PATH}", sudo: true
        return "#{ADMIN_KEYS_PATH}/#{user}.pub"
      end

      # Install a debian package using the package manager
      def install(*packages)
        ssh.exec! "apt-get --assume-yes install #{packages.join(' ')}", sudo: true
        return packages.count
      end

      # Uninstall a debian package using the package manager
      def uninstall(*packages)
        ssh.exec! "apt-get --assume-yes purge #{packages.join(' ')}", sudo: true
      end

      # Install Opscode Chef using omnibus installer
      def install_chef
        ssh.exec! "curl -L https://www.opscode.com/chef/install.sh | bash", sudo: true
        chef.init
        return Appd::Server::Chef::CHEF_REPO_URI
      end

      private
      
      # Rebuild the remote host file with the specified hostname and fqdn
      def rebuild_host_file(hostname_, fqdn_)

        # Get the old hosts file
        hosts_content = ssh.exec! "cat /etc/hosts"
        hosts = Hosts::File.parse(hosts_content)

        # Delete old entry if exist
        hosts.elements.each{ |element| hosts.elements.delete element if element.class == Hosts::Entry && element.address == ip }
        
        # Add the new entry
        localhost_entry = Hosts::Entry.new ip, fqdn_, aliases: [hostname_], comment: ' Generated by Appd'
        hosts.elements.insert(0, localhost_entry)
        ssh.write "/etc/hosts", hosts.to_s, sudo: true
      end
    end
  end
end