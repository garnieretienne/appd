require "appd/server/ssh"
require "hosts"

module Appd

  module Server

    class System

      def initialize(ssh_uri)
        @remote = Appd::Server::SSH.new ssh_uri
      end

      # Cache the SSH remote connection
      def ssh
        @ssh ||= @remote.connect
        @remote
      end

      # Return the hostname of the remote host
      def hostname
        ssh.exec!("hostname").chomp
      end

      # Set the hostname on the remote host
      def hostname=(name)
        if hostname != name
          rebuild_host_file(name, fqdn)
          ssh.exec! "hostname #{name}"
          ssh.exec! "echo #{name} > /etc/hostname"
        end
      end

      # Get the first non-localhost IP address
      def ip
        ssh.exec!("/sbin/ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'").chomp
      end

      # Get the fully qualified domain name of the remote host
      def fqdn
        exit_code, stdout = ssh.exec("hostname --fqdn")
        (exit_code == 0) ? stdout.chomp : ""
      end

      # Set the fully qualified domain name of the remote host
      def fqdn=(name)
        rebuild_host_file(hostname, name) if fqdn != name
      end

      private
      
      # Rebuild the remote host file with the current hostname and fqdn
      def rebuild_host_file(hostname_, fqdn_)

        # Get the old hosts file
        hosts_content = ssh.exec! "cat /etc/hosts"
        hosts = Hosts::File.parse(hosts_content)

        # Delete old entry if exist
        hosts.elements.each{ |element| hosts.elements.delete element if element.class == Hosts::Entry && element.address == ip }
        
        # Add the new entry
        localhost_entry = Hosts::Entry.new ip, fqdn_, aliases: [hostname_], comment: ' Generated by Appd'
        hosts.elements.insert(0, localhost_entry)
        ssh.exec! "cat > '/etc/hosts' <<EOF\n#{hosts.to_s}\nEOF"
      end
    end
  end
end