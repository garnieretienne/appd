require 'appd/ssh_client'
require "hosts"

module Appd
  
  # Represent the remote host
  # All data are gathered or modified using an SSH connection
  class RemoteHost 
    include Appd::SSHClient

    # Default string representation of a remote host is 
    # the remote system host name
    def to_s
      name
    end

    # Ask an external service for the host public IP
    def public_ip
      @public_ip ||= ssh.exec!("curl -s ip.appspot.com").chomp
    end

    # Get the remote system host name
    def name
      ssh.exec!("hostname").chomp
    end

    # Get the remote fully qualified domain name
    def fqdn
      ssh.exec!("hostname --fqdn").chomp
    end

    # Set the remote system host name
    def name=(new_name)
      rebuild_hosts_file(new_name, fqdn)
      ssh.exec! "hostname #{new_name}", sudo: true
      ssh.exec! "echo #{new_name} > /etc/hostname", sudo: true
    end

    # Set the remote system domain name
    def fqdn=(new_fqdn)
      rebuild_hosts_file(name, new_fqdn)
    end

    # Update the remote system using the `apt` package manager
    # If a block is given, the output is sent in live
    def system_update(&block)
      ssh.exec! "apt-get --assume-yes update", sudo: true
      ssh.exec "apt-get --assume-yes upgrade", sudo: true do |ch, stream, data, cmd|
        yield data
      end
    end

    # Install a package using the `apt` package manager
    def install(*packages)
      ssh.exec! "apt-get --assume-yes install #{packages.join(' ')}", sudo: true
      return packages.count
    end

    # Upload a local file to the remote host
    # `dest_path` must be the full path to the remote file
    # The user must have the correct rights
    # User must be root or have sudo access
    def upload(local_path, dest_path)
      local_file_name = File.basename local_path
      dest_dir_name = File.dirname dest_path
      ssh.send_file local_path, "/tmp/#{local_file_name}"
      ssh.exec! "mkdir --parents #{dest_dir_name}", sudo: true
      ssh.exec! "mv /tmp/#{local_file_name} #{dest_path}", sudo: true
      return dest_path
    end

    private

    # Rebuild the remote hosts file (/etc/hosts) with the given host name 
    # and fully qualified domain name
    def rebuild_hosts_file(new_name, new_fqdn)

      # Get the old hosts file
      hosts_content = ssh.exec! "cat /etc/hosts"
      hosts = Hosts::File.parse(hosts_content)

      # Delete old entry if exist
      hosts.elements.each{ |element| hosts.elements.delete element if element.class == Hosts::Entry && element.address == public_ip }
      
      # Add the new entry
      hosts_entry = Hosts::Entry.new public_ip, new_fqdn, aliases: [new_name], comment: ' Generated by Appd'
      hosts.elements.insert(0, hosts_entry)
      ssh.write "/etc/hosts", content: hosts.to_s, sudo: true
    end
  end
end